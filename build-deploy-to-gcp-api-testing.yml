  
name: Reusable Build and Deploy

on:
  workflow_call:
    inputs:
      GAR_LOCATION:
        required: false
        type: string
        default: "us-cental1"
      DEPLOYMENT_GAR_LOCATION:
        required: false
        type: string
        default: "us-central1"   
      PROJECT_ID:
        required: true
        type: string
      REPOSITORY:
        required: true
        type: string
      GKE_NAMESPACE:
        description: "GKE Namespace"
        required: true
        type: string
      ENVIRONMENT:
        description: "Deployment environment"
        required: true
        type: string  
      GKE_CLUSTER_NAME:
        description: "GKE Cluster name"
        required: true
        type: string  
      DEPLOYMENT_NAME:
        required: true
        type: string
      DOCKER_CHAINGUARD:
        description: "Docker chainguard URL"
        required: true
        type: string   
      # runtime_version:
      #   description: "Runtime version for the application"
      #   required: true
      #   type: string  
      DOCKER_REPOSITORY:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      TAG:
        required: true
        type: string
      BUILD_TAG:
        required: false
        type: string
      REPO_NAME:
        description: "The repository name where the PR exists"
        required: true
        type: string  
      RELEASE_TYPE:
        description: "RELEASE_TYPE"
        required: true
        type: string  
        default: "NULL"  
      BRANCH:
        description: "The repository name where the PR exists"
        required: true
        type: string          
      # DEPLOYMENT_FILE:
      #   required: true
      #   type: string
      # SERVICE_FILE:
      #   required: true
      #   type: string
    # secrets:
    #   GCP_SA_KEY_PROD:
    #     required: true
    #   DOCKER_USERNAME:
    #     required: true
    #   DOCKER_PASSWORD:
    #     required: true
      # SONAR_TOKEN:
      #   required: true

jobs:
  build-deploy:
    runs-on: uhg-runner
    environment: ${{ inputs.ENVIRONMENT }}
    # env:
    #   GAR_LOCATION: "us-central1"
    #   PROJECT_ID: "ywmytazy-916j-vtwv-wypu-zt9nkt"

    steps:

    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.BRANCH }}
    # - name: Set Deployment and Service Files
    #   id: set-files
    #    run: |
    #      if [[ "${{ github.repository }}" == "uhc-tech-employer-individual/obm_imd-redis-service" ]]; then
    #         echo "DEPLOYMENT_FILE=deployment-redis.yml" >> $GITHUB_ENV
    #         echo "SERVICE_FILE=service-redis.yml" >> $GITHUB_ENV  
    #       else
    #         echo "DEPLOYMENT_FILE=deployment.yml" >> $GITHUB_ENV
    #         echo "SERVICE_FILE=service.yml" >> $GITHUB_ENV
    #       fi

    - name: Set Deployment and Service Files
      id: set-files
      run: |
        if [[ "${{ github.repository }}" == "uhc-tech-employer-individual/obm_imd-redis-service" ]]; then
          echo "DEPLOYMENT_FILE=deployment-redis.yml" >> $GITHUB_ENV
          echo "SERVICE_FILE=service-redis.yml" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_FILE=deployment.yml" >> $GITHUB_ENV
          echo "SERVICE_FILE=service.yml" >> $GITHUB_ENV
        fi

    - name: Download ${{ env.DEPLOYMENT_FILE }} Template File
      run: |
        curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
             -H 'Accept: application/vnd.github.v3.raw' \
             -o infrastructure/${{ env.DEPLOYMENT_FILE }} \
             -L https://api.github.com/repos/uhc-tech-employer-individual/obm_obm-actions/contents/kubernetes-resource-template/${{ env.DEPLOYMENT_FILE }}?ref=main

    - name: Download ${{ env.SERVICE_FILE }} Template File
      run: |
        curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
             -H 'Accept: application/vnd.github.v3.raw' \
             -o infrastructure/${{ env.SERVICE_FILE }} \
             -L https://api.github.com/repos/uhc-tech-employer-individual/obm_obm-actions/contents/kubernetes-resource-template/${{ env.SERVICE_FILE }}?ref=main

    - name: Check the ${{ env.DEPLOYMENT_FILE }} File Content
      run: cat ./infrastructure/${{ env.DEPLOYMENT_FILE }}

    - name: Set env location
      id: set-location
      run: |
        echo "GAR_LOCATION=${{ inputs.GAR_LOCATION }}" >> $GITHUB_ENV
        echo "PROJECT_ID=${{ inputs.PROJECT_ID }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_GAR_LOCATION=${{ inputs.DEPLOYMENT_GAR_LOCATION }}" >> $GITHUB_ENV

    - name: Configure Maven settings
      run: |
        mkdir -p ~/.m2
        echo "<settings>
                <mirrors>
                  <mirror>
                    <id>artifactory</id>
                    <url>https://repo1.uhc.com/artifactory/repo</url>
                    <mirrorOf>*</mirrorOf>
                  </mirror>
                </mirrors>
              </settings>" > ~/.m2/settings.xml

    - name: "Set up Java"
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        architecture: x64
        cache: 'maven'
        server-id: artifactory
        server-username: MAVEN_USER
        server-password: MAVEN_PASS
        settings-path: $HOME/.m2/settings.xml
        overwrite-settings: false

    - name: Install Maven from Artifactory
      run: |
        MAVEN_VERSION="3.9.8"
        # Create required directories
        mkdir -p $HOME/.m2/bin
        
        # Download Maven from internal artifactory
        curl -u ${{ secrets.MAVEN_USER }}:${{ secrets.MAVEN_PASS }} \
          "https://repo1.uhc.com:443/artifactory/repo/org/apache/maven/apache-maven/${MAVEN_VERSION}/apache-maven-${MAVEN_VERSION}-bin.tar.gz" \
          -o maven.tar.gz

        # Extract Maven
        tar xzf maven.tar.gz
        mv apache-maven-${MAVEN_VERSION}/* $HOME/.m2/
        rm -rf apache-maven-${MAVEN_VERSION} maven.tar.gz
        
        # Set environment variables
        echo "M2_HOME=$HOME/.m2" >> $GITHUB_ENV
        echo "MAVEN_HOME=$HOME/.m2" >> $GITHUB_ENV
        echo "PATH=$HOME/.m2/bin:$PATH" >> $GITHUB_ENV

    - name: Configure Maven
      env:
        MAVEN_OPTS: "-Xmx1024m -Dmaven.repo.local=$HOME/.m2/repository"
        MAVEN_USER: ${{ secrets.MAVEN_USER }}
        MAVEN_PASS: ${{ secrets.MAVEN_PASS }}
        REPO_AUTH: ${{ vars.REPO_AUTH }}
        M2_HOME: ${{ env.M2_HOME }}
        MAVEN_HOME: ${{ env.MAVEN_HOME }}
      run: |
        # Create Maven settings directory if it doesn't exist        
        # Verify Maven installation
        echo "Maven home: $HOME/.m2"
        echo "Maven settings: $HOME/.m2/settings.xml"
        echo "Verifying Maven Installation..."
        $HOME/.m2/bin/mvn --version
    
    - name: "Cache Maven packages"
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
 
    - name: "Run the Maven build"
      run: |
        mvn clean install -DskipTests=true -f pom.xml
      shell: bash

    # - name: "Maven Quality Scan"
    #   uses: optum-eeps/epl-actions/maven-build-scan@v1
    #   with:
    #     sonar-token: ${{ secrets.SONAR_TOKEN }}
    #     enable-codeql: false
    #     enable-sonar: true
    #     maven-command: "clean package install -DskipTests=true -U --file ./pom.xml --batch-mode --update-snapshots verify -Dmaven.repo.local=/home/runner/.m2/repository"
    #     maven-sonar-command: "-DskipTests=true --file ./pom.xml -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dmaven.repo.local=/home/runner/.m2/repository"
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
    - name: Extract Current Version
      id: extract_version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current Version: $CURRENT_VERSION"
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV  
   
    - name: "Set GitHub Token"
      run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

    - name: "Determine PR RELEASE"
      id: release
      env:
        REPO_NAME: "${{ inputs.REPO_NAME }}"  # Pass input as an environment variable
      run: |
        echo "Using Repository: $REPO_NAME"
        if [[ "${{ inputs.RELEASE_TYPE }}" == "NULL" || "${{ inputs.RELEASE_TYPE }}" == "" ]]; then
        
          # Fetch PR Number
          PR_NUM=$(curl -i https://api.github.com/repos/uhc-tech-employer-individual/${{ inputs.REPO_NAME }}/git/commits/${{ github.sha }} -H "Authorization: token ${{ secrets.GH_TOKEN }}" | grep '"message":' | grep -o '#[0-9]\+' | sed 's/[^0-9]*//g')
          echo "Processing PR Number: $PR_NUM"
          # Fetch Release Type
          RELEASE_TYPE=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/uhc-tech-employer-individual/${{ inputs.REPO_NAME }}/pulls/$PR_NUM | jq -r '.body' | grep -io  'RELEASE TYPE: \*\*[a-z]*\*\*' | sed 's/RELEASE TYPE: \*\*//g' | sed 's/\*\*//g' | tr '[:upper:]' '[:lower:]')
          # Print PR Number
          # PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "Processing PR Number: $PR_NUM"
  
          # # Fetch PR Body
          # PR_BODY="${{ github.event.pull_request.body }}"
          # echo "PR Body: $PR_BODY"
  
          # Extract Release Type (Handles case-insensitivity and Markdown formatting)
          # RELEASE_TYPE=$(echo "$PR_BODY" | sed -nE 's/.*RELEASE[ _]TYPE:[[:space:]]*\**([A-Za-z]+)\**.*/\1/p' | tr '[:upper:]' '[:lower:]')
  
          # Validate and set default if empty
          if [[ -z "$RELEASE_TYPE" ]]; then
            echo "ERROR: RELEASE_TYPE not found in PR body."
            echo "Extracted Release Type: $RELEASE_TYPE"
            echo ${{ inputs.RELEASE_TYPE }}
            exit 1
          fi
        fi
        # RELEASE_TYPE=${{ inputs.RELEASE_TYPE }}
        echo "Extracted Release Type: $RELEASE_TYPE"
        echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
        
        
    
    - name: Check Release Type and Increment Version
      id: version_increment
      run: |
        # Get the current version
        CURRENT_VERSION="${{ env.CURRENT_VERSION }}"
        RELEASE_TYPE="${{env.RELEASE_TYPE || inputs.RELEASE_TYPE }}"
        RELEASE_TYPE=$(echo "$RELEASE_TYPE" | tr '[:upper:]' '[:lower:]')


        IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"

        # Initialize versioning variables
        VERSION=""

        case "$RELEASE_TYPE" in
          "major")
            version_parts[0]=$((version_parts[0] + 1))  # Increment Major
            version_parts[1]=0  # Reset Minor
            version_parts[2]=0  # Reset Patch
            ;;
          "minor")
            version_parts[1]=$((version_parts[1] + 1))  # Increment Minor
            version_parts[2]=0  # Reset Patch
            ;;
          "patch")
            version_parts[2]=$((version_parts[2] + 1))  # Increment Patch
            ;;
          *)
            echo "ERROR: Release type '$RELEASE_TYPE' is invalid. Allowed: major, minor, patch."
            exit 1
            ;;
        esac  

        VERSION="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
        echo "New Version: $VERSION"
        echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
   
      
    - name: Set Image Tag with Environment
      id: set-image-tag
      run: |
        ENV=${{ inputs.environment }}
        # IMAGE_TAG="${{ env.NEW_VERSION }}-${GITHUB_SHA:0:8}-$ENV" 
        # echo "Image tag: $IMAGE_TAG"
        # echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        TAG="${{ env.NEW_VERSION }}-${GITHUB_SHA:0:8}-$ENV" 
        echo "Image tag: $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV

    
    - name: Set GCP Service Account Key
      id: set-gcp-key
      run: |
        if [ "${{ inputs.PROJECT_ID }}" == "ywmytazy-916j-vtwv-wypu-zt9nkt" ]; then
          echo "SA_KEY=GCP_SA_KEY" >> $GITHUB_ENV
        elif [ "${{ inputs.PROJECT_ID }}" == "ntegcpij-nzxh-xp8a-wkj2-7w3635" ]; then
          echo "SA_KEY=GCP_SA_KEY_PROD" >> $GITHUB_ENV
        else
          echo "Unknown PROJECT_ID: ${{ inputs.PROJECT_ID }}"
          exit 1
        fi

    - name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets[env.SA_KEY] }}

    - name: 'Set up GCP SDK'
      uses: google-github-actions/setup-gcloud@v2

    - name: 'Configure Docker for GCP'
      run: |
        gcloud auth configure-docker ${{ inputs.GAR_LOCATION }}-docker.pkg.dev
      shell: bash

    - name: Log into Chainguard Docker Registry 
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ inputs.DOCKER_CHAINGUARD }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      shell: bash

    # - name: "Build Docker image"
    #   run: |
    #     docker build -t ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/obm-artifact-registry/${{ inputs.IMAGE_NAME }}:$IMAGE_TAG .

    # - name: "Push Docker image"
    #   run: |
    #     docker push ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/obm-artifact-registry/${{ inputs.IMAGE_NAME }}:$IMAGE_TAG 
        
  
        
    - name: "Build Docker Image"
      run: |
        docker build -t ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/obm-artifact-registry/${{ inputs.IMAGE_NAME }}:$TAG . 

    - name: "Push Docker Image"
      run: |
        docker push ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/obm-artifact-registry/${{ inputs.IMAGE_NAME }}:$TAG
 
    # - name: "TwistCLI Image Scan"
    #   uses: ./.github/actions/twistcli-scan
    #   with:
    #     prisma-user: ${{ secrets.DOCKER_USERNAME }}
    #     image: ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/obm-artifact-registry/${{ inputs.IMAGE_NAME }}:$TAG 
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    - name: "Upload Build Artifact"
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: target/*.jar
        if-no-files-found: warn

    - name: Determine Environment
      id: determine-env
      run: |
        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
          echo "ENV=prod" >> "$GITHUB_ENV"
        elif [[ $GITHUB_REF == 'refs/heads/feature/gcp_migration' ]]; then
          echo "ENV=dev" >> "$GITHUB_ENV"
        elif [[ $GITHUB_REF == 'refs/heads/stage' ]]; then
          echo "ENV=stage" >> "$GITHUB_ENV"
        else
          echo "ENV=nonprod" >> "$GITHUB_ENV"
        fi
        
    - name: Load parameters from params.properties
      id: load_params
      run: "if [[ $ENV == 'prod' ]]; then\n  PARAMS_FILE=infrastructure/prod-params.properties\nelif [[ $ENV == 'dev' ]]; then\n  PARAMS_FILE=infrastructure/dev-params.properties\nelif [[ $ENV == 'stage' ]]; then\n  PARAMS_FILE=infrastructure/stage-params.properties\nelse\n  PARAMS_FILE=infrastructure/preprod-params.properties\nfi\nwhile IFS= read -r line; do\n  if [[ ! $line =~ ^# && $line =~ ^[A-Z_]+= ]]; then\n    echo \"$line\" >> $GITHUB_ENV\nfi\ndone < $PARAMS_FILE    \n    #magic___^_^___line\n"
    
    - name: 'Update gcloud SDK'
      run: gcloud components update -q

    # - name: Set GKE credentials
    #   run: |
    #     gcloud components install gke-gcloud-auth-plugin
    #     gcloud container clusters get-credentials ${{ inputs.GKE_CLUSTER_NAME }} --region ${{ env.DEPLOYMENT_GAR_LOCATION }} --project ${{ env.PROJECT_ID }}
      
    # - name: "Set GKE credentials"
    #   run: |
    #     gcloud components install gke-gcloud-auth-plugin
    #     gcloud container clusters get-credentials ${{ inputs.GKE_CLUSTER_NAME }} --region us-central1 --project ${{ env.PROJECT_ID }}     

    - name: "Prepare Kubernetes ${{ env.DEPLOYMENT_FILE }} and ${{ env.SERVICE_FILE }} File for the Deployment"
      run: |
        while IFS='=' read -r key value; do
          # Ignore empty lines and comments
          if [[ -z "$key" || "$key" =~ ^# ]]; then
            continue
          fi

          key=$(echo $key | xargs)  # Trim leading/trailing spaces
          value=$(echo $value | xargs)  # Trim leading/trailing spaces

          # echo "key: $key, value: $value"  # Debugging line
          echo "$key = $value"  # Debugging line
          
          # Ensure key is not empty before using sed
          if [[ -n "$key" && -n "$value" ]]; then
            sed -i "s|${key}|${value}|g" ./infrastructure/${{ env.DEPLOYMENT_FILE }}
            sed -i "s|${key}|${value}|g" ./infrastructure/${{ env.SERVICE_FILE }}
          fi
        done < ./infrastructure/${{ inputs.ENVIRONMENT }}-params.properties

    - name: "Check the ${{ env.DEPLOYMENT_FILE }} File"
      run: |
         cat ./infrastructure/${{ env.DEPLOYMENT_FILE }}

    - name: "Check the ${{ env.SERVICE_FILE }} File"
      run: |
        cat ./infrastructure/${{ env.SERVICE_FILE }}

    - name: 'Deploy to GKE in Multiple Regions'
      run: |
        if [ "${{ inputs.environment }}" == "prod" ]; then
          LOCATIONS="us-central1,us-east4"
        else
          LOCATIONS="${{ env.DEPLOYMENT_GAR_LOCATION }}"
        fi
        
        IFS=',' read -ra LOCATIONS_ARRAY <<< "$LOCATIONS"
        for LOCATION in "${LOCATIONS_ARRAY[@]}"; do
          echo "Deploying to $LOCATION..."
            
          # Install GKE Auth Plugin
          gcloud components install gke-gcloud-auth-plugin
      
          # Authenticate with GKE for the current region
          gcloud container clusters get-credentials ${{ inputs.gke_cluster_name }} --region $LOCATION --project ${{ env.PROJECT_ID }}
      
          # Update the deployment file with the correct image reference
          sed -i "s|image: .*/${{ inputs.IMAGE_NAME }}:.*|image: ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/obm-artifact-registry/${{ inputs.IMAGE_NAME }}:${{ env.TAG }}|" ./infrastructure/${{ env.DEPLOYMENT_FILE }}
      
          # Set replica count to 0 for us-east4, otherwise retain the original value
          if [[ "$LOCATION" == "us-east4" ]]; then
            sed -i "s|replicas: [0-9]\+|replicas: 0|" ./infrastructure/${{ env.DEPLOYMENT_FILE }}
          fi
      
          # Deploy the application to GKE
          kubectl apply -f ./infrastructure/${{ env.DEPLOYMENT_FILE }} -n ${{ inputs.GKE_NAMESPACE }}
          kubectl apply -f ./infrastructure/${{ env.SERVICE_FILE }} -n ${{ inputs.GKE_NAMESPACE }}
      
          echo "Deployment to $LOCATION completed."
        done

    - name: Set up Git
      run: |
        git config --global user.name 'obm_docker_usr'
        git config --global user.email 'obm_cicd_noreply@optum.com'
        git config remote.origin.url https://${{ secrets.GH_TOKEN }}@github.com/uhc-tech-employer-individual/${{ inputs.REPO_NAME }}.git

    - name: Retry Helper Script
      run: |
        # Create retry.sh file
        cat > "$(pwd)/retry.sh" << 'EOF'
        #!/bin/bash
        retry() {
          local retries=$1
          local delay=$2
          shift 2
          local count=0
          local exit_code
        
          until "$@" || [ $count -ge $retries ]; do
            exit_code=$?
            count=$((count + 1))
            echo "Command failed (attempt $count/$retries, exit code $exit_code)"
            if [ $count -lt $retries ]; then
              echo "Retrying in $delay seconds..."
              sleep $delay
            fi
          done
        
          if [ $count -eq $retries ]; then
            echo "Command failed after $retries attempts"
            return $exit_code
          fi
          return 0
        }
        EOF
        
        # Make executable and move to a shared location
        chmod +x "$(pwd)/retry.sh"
        mkdir -p /tmp/scripts
        cp "$(pwd)/retry.sh" /tmp/scripts/
        echo "RETRY_SCRIPT=/tmp/scripts/retry.sh" >> $GITHUB_ENV
        echo "retry() function created at /tmp/scripts/retry.sh"

    - name: "Force Pod Restart"
      run: kubectl rollout restart deployment/${{ inputs.DEPLOYMENT_NAME }} -n ${{ inputs.GKE_NAMESPACE }}        

    - name: Update New Version
      run: |
        # Source the retry script
        . "$RETRY_SCRIPT"
        set -e
        
        BRANCH_NAME="post-build-update-version-${{ env.NEW_VERSION }}"
        
        # Function to handle git operations with retries
        git_operation() {
          local operation=$1
          shift
          retry 3 5 $operation "$@"
        }
        
        # Fetch latest changes
        git_operation git fetch origin
        
        # Check if branch exists locally or remotely
        if git rev-parse --verify $BRANCH_NAME >/dev/null 2>&1 || \
           git show-ref --quiet refs/remotes/origin/$BRANCH_NAME; then
          echo "Branch $BRANCH_NAME already exists, checking it out"
          git_operation git checkout $BRANCH_NAME || git_operation git checkout -b $BRANCH_NAME origin/$BRANCH_NAME
          git_operation git pull origin $BRANCH_NAME
        else
          echo "Creating new branch $BRANCH_NAME"
          git_operation git checkout -b "$BRANCH_NAME" "origin/${{ inputs.branch }}"
        fi
        
        # Update version
        git_operation mvn org.codehaus.mojo:versions-maven-plugin:2.16.1:set -DnewVersion="${{ env.NEW_VERSION }}" -DgenerateBackupPoms=false || true
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Stage and commit
        git_operation git status
        git_operation git add pom.xml
        git_operation git commit -m "[skip-ci] post deployment update to pom.xml version ${{ env.NEW_VERSION }}"
        
        # Force push changes (overwrite if branch exists)
        git_operation git push -f origin "$BRANCH_NAME"

    - name: Create Pull Request
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        . "$RETRY_SCRIPT"
        set -e
        
        BRANCH_NAME="post-build-update-version-${{ env.NEW_VERSION }}"
        
        # Wait for branch to be available
        sleep 5
        
        # Create PR with explicit base and head references
        retry 3 5 gh pr create \
          --title "[skip-ci] post deployment update to pom.xml version ${{ env.NEW_VERSION }}" \
          --body "Post deployment PR updates the pom.xml to version ${{ env.NEW_VERSION }}" \
          --base "${{ inputs.branch }}" \
          --head "uhc-tech-employer-individual:$BRANCH_NAME" \
          --repo "uhc-tech-employer-individual/${{ inputs.REPO_NAME }}"

    - name: Merge Pull Request
      run: |
        . "$RETRY_SCRIPT"
        set -e
        
        BRANCH_NAME="post-build-update-version-${{ env.NEW_VERSION }}"
        PR_NUMBER=$(retry 3 5 gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number')
        if [ -z "$PR_NUMBER" ]; then
          echo "Error: PR not found."
          exit 1
        fi
        retry 3 5 gh pr merge "$PR_NUMBER" --merge --admin      # - name: Commit and Push Changes
